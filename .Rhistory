splitnames[123]
#2
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
skip = 5, nrows = 190, header = F, stringsAsFactors = F) %>%
select(V1,V2, V4:V5) %>%
rename(countrycode = V1, ranking = V2, country = V4, milusd = V5)
head(gdp$milusd)
?sub
gdp$milusd <- sub(",", "", gdp$milusd)
head(gdp$milusd)
gdp$milusd <- gsub(",", "", gdp$milusd)
head(gdp$milusd)
mean(gdp$milusd)
class(gdp$milusd)
?read.csv
gdp$milusd <- gsub(",", "", gdp$milusd) %>% as.numeric(gdp$milusd)
head(gdp$milusd)
class(gdp$milusd)
head(gdp$milusd) ; class(gdp$milusd)
mean(gdp$milusd)
grep("^United", gdp$country)
grep("*United", gdp$country)
grep("United", gdp$country)
grep("^United", gdp$country)
#4
edu <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
head(edu)[, 3]
head(edu)[, 1:3]
colnames(edu)
match("fiscal", colnames(edu))
grep("fiscal", colnames(edu), value = T)
grep("yea", colnames(edu), value = T)
grep("year", colnames(edu), value = T)
grep("[Yy]ear", colnames(edu), value = T)
head(edu$National.accounts.base.year)
head(edu$National.accounts.reference.year)
grep("month", colnames(edu), value = T)
grep("month", colnames(edu), value = T)
grep("atecolnames(edu), value = T)
grep("date", colnames(edu), value = T)
names(gdp)
names(edu)
gdpedu <- (gdp, edu, "countrycode", "CountryCode")
gdpedu <- (gdp, edu, "countrycode", "CountryCode")
gdpedu <- merge(gdp, edu, "countrycode", "CountryCode")
gdpedu <- merge(x = gdp, y = edu, by.x = "countrycode", by.y = "CountryCode")
head(gdpedy)
head(gdpedu)
head(gdpedu$Latest.household.survey)
head(gdpedu$Special.Notes)
gdpedu[, "Special.Notes"]
length(grep("Fiscal year end", gdpedu$Special.Notes))
fiscal <- grep("Fiscal year end", gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end & June", gdpedu$Special.Notes, value = T)
fiscal <- grep("(Fiscal year end) & (June) " , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end" & "June" , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end&June"  , gdpedu$Special.Notes, value = T)
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T)
length(grep("June", fiscal))
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T) %>% grep("June")
fiscal <- grep("Fiscal year end" , gdpedu$Special.Notes, value = T)
grep("Fiscal year end(.*)June" , gdpedu$Special.Notes, value = T)
length(grep("Fiscal year end(.*)June" , gdpedu$Special.Notes, value = T))
sampleTimes = index(amzn)
#5
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
head(sampleTimes[20])
head(sampleTimes[188])
head(sampleTimes[189])
head(sampleTimes[300])
in2012 <in grep("2012", sampleTimes, value = T)
in2012 <-  grep("2012", sampleTimes, value = T)
?strptime
library(lubridate)
in2012 <- ymd(in2012)
2012logic <-
?wday
2012logic <- wday(in2012, label) == "Monday"
logic <- wday(in2012, label) == "Monday"
logic <- wday(in2012, label = T) == "Monday"
length(in2012[logic])
head(wday(in2012, label = T))
logic <- wday(in2012, label = T) == "Mon"
length(in2012[logic])
rm(list = ls())
?quantile
setwd(getwd())
setwd("D:/Documents/Coursera/Data Science/4. Exploring Data Analysis")
x <- "hello"
load("D:/Documents/Coursera/Inferential Statistics/.RData")
head(airquality)
download.file("https://raw.githubusercontent.com/jtleek/modules/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv",
destfile = "data/avgpm25.csv", method = 'curl')
?read.csv
avgpm25 <- read.csv('data/avgpm25.csv')
head(avgpm25)
class(colnames(avgpm25))
class(avgpm25)
class(avgpm25$region)
avgpm25 <- read.csv('datavgpm25.csv', stringsAsFactors = F)
avgpm25 <- read.csv('data/avgpm25.csv', stringsAsFactors = F)
head(avgpm25)
class(avgpm25$region)
pollution <- read.csv('data/avgpm25.csv', stringsAsFactors = F)
head(pollution)
pollution[pm25 >> 12, 'fips']
pollution['pm25' >> 12, 'fips']
pollution['pm25' >> 12, fips]
pollution['pm25' > 12, fips]
pollution['pm25' > 12, 'fips']
length(pollution['pm25' > 12, 'fips']
)
class(pollution$fips)
filter(pollution, fips >> 12)
filter(pollution, fips>>12)
filter(pollution, fips >>12)
filter(pollution, fips >12)
filter(pollution, fips > 12)
filter(pollution, pm25 >12)
class(pollution, pm25)
head(pollution)
class(pollution$pm25)
filter(pollution, pm25 >12)
colnames(pollution)
filter(pollution, 'pm25' >12)
filter(pollution, 'pm25' >12) %>% select('fips')
library(dplyr)
filter(pollution, pm25 >12)
filter(pollution, pm25 >12) %>% select(fips)
filter(pollution, pm25 >12) %>% select(fips) %>% length
filter(pollution, pm25 >12) %>% select(fips) %>% nrow
pollution['pm25' >12, 'fips']
pollution[pm25 >12, 'fips']
head(pollution)
pollution[ 'pm25' >12, 'fips']
head(pollution)
pollution[pollution$pm25 >12, 'fips']
with(pollution, [pm25 >12, 'fips'])
summary(pollution$pm25)
boxplot(pollution$pm25)
boxplot(pollution$pm25, col = "blue")
boxplot(pollution$pm25, col = "sky blue")
hist(pollution$pm25, col = "green")
hist(pollution$pm25, col = "green", breaks = 20)
hist(pollution$pm25, col = "green", breaks = 10)
hist(pollution$pm25, col = "green", breaks = 10)
hist(pollution$pm25, col = "green", breaks = 50)
hist(pollution$pm25, col = "green", breaks = 100)
?abline
hist(pollution$pm25, col = "green", breaks = 100) #breaks give the number of bars
abline(h = 15)
abline(v = mean(pollution$pm25))
abline(v = mean(pollution$pm25), lwd = 3)
abline(v = mean(pollution$pm25), lwd = 5)
abline(v = mean(pollution$pm25), lwd = 3)
abline(v = mean(pollution$pm25), lwd = 3, col = "grey")
barplot((pollution$region))
barplot(pollution$region)
barplot(table(pollution$region))
barplot(table(pollution$region), col = 'navy blue')
barplot(table(pollution$region), col = 'navy blue', main = "Number of Countries in each Region")
boxplot(pm25 ~ region, data = pollution, col = "orange")
?par
par(mfrow = c(2, 1), mar = c(3,3,2,1))
hist(filter(pollution, region == 'east')$pm25, col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'blue')
with(pollution, plot(lattitude, pm25))
with(pollution, plot(latitude, pm25))
par(mfrow(1, 1))
with(pollution, plot(latitude, pm25))
par(mfrow=c(1, 1))
with(pollution, plot(latitude, pm25))
?abline
with(pollution, plot(latitude, pm25))
#for details of line types colors or other graphic things related go to ?par and search the parameter in help
abline(h = 10, lwd = 2, col = 'dark grey', lty = 6)
head(pollution)
with(pollution, plot(longitude, latitude, col = region))
with(pollution, plot(longitude, latitude))
with(pollution, plot(longitude, latitude, col = region))
with(pollution, plot(longitude, latitude))
with(pollution, plot(pm25, longitude, col = region))
with(pollution, plot(pm25, longitude))
with(pollution, plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25, col = region))
with(pollution, plot(latitude, pm25))
?plot
with(pollution, plot(latitude, pm25, col = region))
with(pollution, plot(latitude, pm25, col(region == 'east') = "blue"))
with(pollution, plot(latitude, pm25))
year = c(1990:1994)
sales = c(1:5)
region = c('East','East','West','North','South')
SalesData = data.frame(sales,year,region)
with(SalesData,plot(year,sales,col=region))
with(pollution, plot(latitude, pm25, col=region))
class(pollution$region)
head(pollution)
head(SalesData)
class(pollution)
with(SalesData,plot(year,sales,col=region))
with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25, col=region))
rm(reion)
rm(region)
with(pollution, plot(latitude, pm25, col=region))
with(pollution, plot(longitude, latitude))
with(pollution, plot(latitude, pm25, col=region))
dev.off
with(pollution, plot(latitude, pm25, col=region))
?attach
class(SalesData$region)
class(pollution$region)
pollution$region <- as.factor(pollution$region)
with(pollution, plot(latitude, pm25, col=region)) #not working, because region is character not factor
with(pollution, plot(longitude, latitude, col = region))
abline(mean(polllution$longitude))
with(pollution, plot(longitude, latitude, col = region))
abline(mean(polllution$longitude))
with(pollution, plot(longitude, latitude, col = region))
abline(mean(pollution$longitude))
with(pollution, plot(longitude, latitude, col = region))
abline(v = mean(pollution$longitude))
abline(v = median(pollution$longitude))
abline(v = mode(pollution$longitude))
abline(v = mode(pollution$longitude))
abline(v = mod(pollution$longitude))
par(mfrow = c(2, 2))
par(mfrow = c(2, 2), mar = c(4,4,2,1))
with(filter(pollution, region == 'east'), plot(latitude, pm25, main = 'East'))
par(mfrow = c(2, 1), mar = c(4,4,2,1))
with(filter(pollution, region == 'east'), plot(latitude, pm25, main = 'East'))
par(mfrow = c(1, 2), mar = c(4,4,2,1))
with(filter(pollution, region == 'east'), plot(latitude, pm25, main = 'East'))
with(filter(pollution, region == 'west'), plot(latitude, pm25, main = 'West'))
apr('lty')
par('lty')
?par
par('col')
par('mar')
par'mfrow'
par('mfrow')
par(mfrow = (c(1,1)))
par('mfrow')
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
colname(airquality)
colnames(airquality)
table(airquality$Month)
?transform
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone')
class(airquality$Ozone)
class(airquality$Month)
airquality <- transform(airquality, Month = factor(Month))
class(airquality$Month)
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone')
>par
?par
>plot
?plot
requie(graphics)
require(graphics)
library(help = 'graphics')
?`graphics-package`
#important base plotting functions, plot, lines, points, text, title, mtext, axis
library(help = 'graphics') #for the details, library(help = 'package name')
with(airquality, plot(Wind, Ozone))
title("Wind and Ozone in NewYork City")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'blue'))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'red'))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = 'blue'))
#important base plotting functions, plot, lines, points, text, title, mtext, axis #all examplified below
library(help = 'graphics') #for the details, library(help = 'package name')
?legend
with(airquality, plot(Wind, Ozone))
title("Wind and Ozone in NewYork City")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = 'red'))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = 'blue'))
?par
legend("topright", pch = 1, col = c("red", "blue"), legend = c("May", "Other months"))
?legend
model <- lm(Ozone ~ Wind)
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2, col = "purple")
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation" )
})
?oma
??oma
?par
#important base plotting functions, plot, lines, points, legend, text, title, mtext, axis #all examplified below
library(help = 'graphics') #for the details, library(help = 'package name')
colnames(airquality)
par('oma')
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0,0,2, 0))
mtext("Ozone and Weather in New York", outer = T, cex = 1.5)
mtext("Ozone and Weather in New York", outer = T, cex = 1)
with(airquality, {
plot(Wind, Ozone, main = "Ozone vs Wind")
plot(Solar.R, Ozone, main = "Ozone vs Solar Radiation")
plot(Temp, Ozone, main = "Ozone vs Temperature")
mtext("Ozone and Weather in New York", outer = T, cex = 1)
})
with(airquality, {
plot(Wind, Ozone, main = "Ozone vs Wind")
plot(Solar.R, Ozone, main = "Ozone vs Solar Radiation")
plot(Temp, Ozone, main = "Ozone vs Temperature")
mtext("Ozone and Weather in New York", outer = T, cex = 1.5)
})
dev.off()
dev.off()
par('mar')
?gl
haed(mtcars)
head(mtcars)
with(mtcars, plot(mpg, qsec))
with(mtcars, plot(mpg, hp))
with(mtcars, plot(mpg, hp, type = 'n'))
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Manual", "Automatic"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Autpmatic", "Manual"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
?plot
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
?pdf
pdf(file = "data/firstpdfplot.pdf") #initiates a pdf graphing device
with(mtcars, plot(mpg, hp, type = 'n' = main = "Average vs Horsepower")) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
pdf(file = "data/firstpdfplot.pdf") #initiates a pdf graphing device
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual")) #make whatever plot you want to make
title(main = "Average vs Horsepower")
dev.off()
dev.off() # this closes the graphics and finalize the pdf
dev.off() # this closes the graphics and finalize the pdf
pdf(file = "data/firstpdfplot.pdf") #initiates a pdf graphing device
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
title(main = "Average vs Horsepower")  #make whatever plot you want to make
dev.off() # this closes the graphics and finalize the pdf
jpeg("data/firstjpegplot.jpg")
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
title(main = "Average vs Horsepower")  #make whatever plot you want to make
dev.off() # this closes the graphics and finalize the pdf
?jpeg
jpeg("data/firstjpegplot.jpg", width = 1080, height = 1080)
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
title(main = "Average vs Horsepower")  #make whatever plot you want to make
dev.off() # this closes the graphics and finalize the pdf
jpeg("data/firstjpegplot.jpg")
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
title(main = "Average vs Horsepower")  #make whatever plot you want to make
dev.off() # this closes the graphics and finalize the pdf
jpeg("data/firstjpegplot.jpg", quality = 100)
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
title(main = "Average vs Horsepower")  #make whatever plot you want to make
dev.off() # this closes the graphics and finalize the pdf
jpeg("data/firstjpegplot.jpg", quality = 200)
with(mtcars, plot(mpg, hp, type = 'n')) #type 'n' plots empty plot
with(filter(mtcars, am == 1), points(mpg, hp, col = "red"))
with(filter(mtcars, am == 0), points(mpg, hp, col = "blue"))
with(filter(mtcars, am == 1), abline(lm(hp~mpg), col = "red"))
with(filter(mtcars, am == 0), abline(lm(hp~mpg), col = "blue"))
legend("topright", pch = 1, col = c('red', 'blue'), legend = c("Automatic", "Manual"))
title(main = "Average vs Horsepower")  #make whatever plot you want to make
dev.off() # this closes the graphics and finalize the pdf
dev.cur()
jpeg()
bitmap()
pdf()
dev.cur()
dev.list()
dev.set(2)
dev.cur()
dev.off()
dev.list()
dev.cur()
dev.off()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser Data")
dev.copy(file = "data/geyserplot.png")
dev.off()
dev.set(2)
dev.list()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser Data")
dev.copy(file = "data/geyserplot.png")
dev.off()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser Data")
dev.copy(png, file = "data/geyserplot.png")
dev.off()
library(swirl)
packageVersion('swirl')
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = 'green', break = 100)
hist(ppm, col = 'green', breaks =  = 100)
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), lwd = 4)
abline(v = median(ppm), lwd = 4, col = 'magenta')
abline(v = median(ppm), col = 'magenta', lwd = 4)
colnames(pollution)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat', main = 'Number of Counties in Each Region')
boxplot(pm25 ~ region, data = pollution, col = 'red')
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
east <- subset(pollution, region == 'east')
head(east)
hist(east$pm25, col = 'green')
hist(subset(pollution, region = 'west'), col = 'green')
hist(subset(pollution, region == 'west'), col = 'green')
hist(subset(pollution, region == 'west'), col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'green')
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm , col )
plot(pollution$latitude, ppm , col = region )
plot(pollution$latitude, ppm , col = pollution$region )
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = 'west')
plot(west$latitude, west$pm25, main = 'West')
plot(east$latitude, east$pm25, main = 'West')
plot(east$latitude, east$pm25, main = 'East')
?Devices
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geyser Data')
title(main = 'Old Faithful Geyser data')
dev.cur()
pdf(file = 'myplot.pdf')
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geyser data')
dev.cur()
dev.off()
dev.cur
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, ' geyserplot.png')
dev.copy(png, 'geyserplot.png')
dev.copy(png, file = 'geyserplot.png')
ev.off()
dev.off()
head(cars)
with(cars, plot(speed, dist))
